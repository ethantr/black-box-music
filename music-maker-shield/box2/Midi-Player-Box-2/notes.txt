#include "config.h"
#include "lfo.h"
#include "midi_helpers.h"
#include "chords.h"
#include "ultrasonic.h"
#include "VS1053MidiInterface.h"
#include "Sequencer.h"
#include "Step.h"
#include "Note.h"

UltrasonicSensor sensor1(TRIG_PIN, ECHO_PIN, "Sensor 1");

VS1053MidiInterface midiInterface;
Sequencer sequencer(120, &midiInterface);

// Progression A
Note a1[] = { {60, 100, 0}, {63, 100, 0}, {67, 100, 0}, {44, 90, 0} }; // Ab
Note a2[] = { {62, 100, 0}, {65, 100, 0}, {67, 100, 0}, {46, 90, 0} }; // Bb
Note a3[] = { {63, 100, 0}, {67, 100, 0}, {68, 100, 0}, {48, 90, 0} }; // C

// Progression B
Note b1[] = { {60, 90, 0}, {64, 100, 0}, {69, 100, 0}, {45, 80, 0} };  // Am9
Note b2[] = { {60, 80, 0}, {65, 100, 0}, {68, 100, 0}, {49, 70, 0} };  // Dbmaj7
Note b3[] = { {67, 90, 0}, {70, 100, 0}, {72, 100, 0}, {51, 85, 0} };  // Eb

const uint8_t CHORD_SIZE = 4;
Note* progA[] = { a1, a2, a3 };
Note* progB[] = { b1, b2, b3 };
const uint8_t NUM_STEPS = 3;
Step blendedSteps[NUM_STEPS];

void setup() {
  Serial.begin(9600);
  VS1053_MIDI.begin(31250);

  pinMode(VS1053_RESET, OUTPUT);
  digitalWrite(VS1053_RESET, LOW);
  delay(10);
  digitalWrite(VS1053_RESET, HIGH);
  delay(10);

  midiSetChannelBank(0, VS1053_BANK_MELODY);
  midiSetInstrument(0, 103);
  midiSetChannelVolume(0, MASTER_VOLUME);

  pinMode(LED_PIN, OUTPUT);
  sensor1.begin();
  pinMode(PRESSURE_PIN, INPUT);

  // Chord 1: Ab (C Eb G) with low Ab
  Note chord1[] = { {60, 100, 0}, {63, 100, 0}, {67, 100, 0}, {44, 90, 0} }; // + low Ab
Step step1(chord1, 4, 3000, 400);

// Chord 2: Bb (D F G) with low Bb
Note chord2[] = { {62, 100, 0}, {65, 100, 0}, {67, 100, 0}, {46, 90, 0} }; // + low Bb
Step step2(chord2, 4, 3000, 400);

// Chord 3: C (Eb G Ab) with low C
Note chord3[] = { {63, 100, 0}, {67, 100, 0}, {68, 100, 0}, {48, 90, 0} }; // + low C
Step step3(chord3, 4, 3000, 400);

// Add to sequencer
sequencer.addStep(step1);
sequencer.addStep(step2);
sequencer.addStep(step3);
//   for (int i = 0; i < NUM_STEPS; i++) {
//   sequencer.addStep(blendedSteps[i]);
// }
sequencer.reset();


}




Note blendNotes(const Note& n1, const Note& n2, float t) {
  uint8_t pitch = round(n1.pitch * (1 - t) + n2.pitch * t);
  uint8_t velocity = round(n1.velocity * (1 - t) + n2.velocity * t);
  return Note(pitch, velocity, 0);
}

void blendChords(Note* a, Note* b, Step& result, float t) {
  result.clearNotes();
  for (int i = 0; i < CHORD_SIZE; i++) {
    result.addNote(blendNotes(a[i], b[i], t));
  }
}


void loop() {
  // int pressureRaw = analogRead(PRESSURE_PIN_2);
  // float t = constrain(pressureRaw / 1023.0, 0.0, 1.0);

  // // Update blended steps based on pressure
  // for (int i = 0; i < NUM_STEPS; i++) {
  //   blendChords(progA[i], progB[i], blendedSteps[i], t);
  //   sequencer.setStep(i, blendedSteps[i]);
  // }

  sequencer.update();


  long pressure = analogRead(PRESSURE_PIN);
  // Serial.println(pressure);
  uint8_t ccValue = map(pressure, 0, 1023, 0, 127);

  Serial.println(ccValue);

  // Send control changes on channel 0 (pad/chords)
  midiCC(0, 11, ccValue);  // Expression
  midiCC(0, 74, ccValue);  // Brightness
  midiCC(0, 1, ccValue);  // Reverb amount

  // unsigned long now = millis();
  // unsigned long dt = now - lastLFO;

  // if (dt > 20) {
  //   midiCC(1, 7, updateLFO(volLFO, dt));
  //   lastLFO = now;
  // }

  // long dist = 2;
  // int pressure = analogRead(PRESSURE_PIN);
  // Serial.print("[PRESURE] ");
  // Serial.println(pressure);

  // uint8_t cIdx = map(pressure, 0, 1023, 0, NUM_CHORDS - 1);
  // const uint8_t* chord = chords[cIdx];

  // float depth = map(pressure, 0, 1023, 10, 50);
  // velLFO.minVal = BASE_VEL - depth;
  // velLFO.maxVal = BASE_VEL + depth;

  // midiSetInstrument(0, pressure < 512 ? VS1053_GM1_OCARINA : VS1053_GM1_ECHOES);

  // unsigned long interval = map(dist, 5, 100, 200, 800);
  // int dynVel = constrain(map(dist, 5, 100, 100, 50), 10, 127);

  // if (now - lastMel > interval) {
  //   uint8_t note = scaleNotes[chord[random(0, 3)]];
  //   midiNoteOn(0, note, dynVel);
  //   digitalWrite(LED_PIN, HIGH);
  //   delay(30);
  //   midiNoteOff(0, note, 0);

  //   for (uint8_t i = 0; i < 3; i++) {
  //     uint8_t root = scaleNotes[chord[i]] - 12;
  //     midiNoteOn(1, root, dynVel / 2);
  //   }
  //   delay(100);
  //   for (uint8_t i = 0; i < 3; i++) {
  //     uint8_t root = scaleNotes[chord[i]] - 12;
  //     midiNoteOff(1, root, 0);
  //   }

  //   digitalWrite(LED_PIN, LOW);
  //   lastMel = now;
  // }
}
